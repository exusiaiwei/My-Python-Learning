# 异常情况


在编程中，异常是程序运行时可能遇到的问题。在Python中，异常被设计为一个特殊的对象，可以被"抛出"并且"捕获"。当一个异常被抛出时，程序的控制流将立即转移到最近的能处理该异常的异常处理代码块。如果没有找到相应的处理代码，那么程序将终止并显示异常消息。




## 处理异常

我们可以使用`try..except`语句来捕获异常。`try`语句包含了可能会引发异常的代码块，以及对这些异常的处理代码块。`except`块中包含了所有的错误处理程序。

`try..except`语句的基本语法如下：

```{python}
try:
    # 这里是可能抛出异常的代码
    x = 1 / 2
except ZeroDivisionError:
    print("Cannot divide by zero")
else:
    # 这里是只有在没有发生异常时才会执行的代码
    print("No exceptions occurred")
```

在上述代码示例中：

- `try`语句包含了可能抛出异常的代码块，即`x = 1 / 0`。
- `except`语句包含了对异常的处理代码块，即`print("Cannot divide by zero")`。
  - `except`语句可以处理单个指定的异常，也可以处理一个括号内的异常元组。
  - 如果没有指定异常类型，那么`except`语句将捕获所有类型的异常。
  - 在代码示例中，`except ZeroDivisionError`指定了只捕获`ZeroDivisionError`异常。这是一个特定的异常类型，用于处理除零错误。
- 每个`try`语句都可以包含多个`except`语句，用于处理不同类型的异常。但是，只有一个`except`语句会被执行。
- 每个`try`语句都可以包含一个`else`语句，用于指定只有在没有发生异常时才会执行的代码块。
- 每个`try`语句都可以包含一个`finally`语句，用于指定无论是否发生异常都要执行的代码块。
- 每个`try`语句都至少包含一个`except`语句或`finally`语句，用于处理异常。


### 异常类

Python提供了一些内置的异常类，用于表示不同类型的错误情况。常见的异常类包括：

- `Exception`：所有异常类的基类。
- `NameError`：名称错误，当尝试访问不存在的变量或函数时引发。
- `TypeError`：类型错误，当操作或函数应用于不兼容的类型时引发。
- `ValueError`：值错误，当操作或函数应用于具有正确类型但具有无效值的对象时引发。
- `IndexError`：索引错误，当尝试访问列表、元组或字符串中不存在的索引时引发。
- `KeyError`：键错误，当尝试访问字典中不存在的键时引发。
- `FileNotFoundError`：文件未找到错误，当尝试打开不存在的文件时引发。

### 引发异常

我们可以使用`raise`语句来引发异常。`raise`语句用于引发指定的异常。

可以被引发的异常可以是任何类的实例，但通常是内置的异常类的实例。`raise`语句的基本语法如下：

```{python}


