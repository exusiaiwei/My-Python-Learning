# 面向对象编程

面向对象编程（Object-Oriented Programming，OOP）是一种程序设计范型，其主要思想是将数据及对数据的操作封装在一起形成对象，对相同类型的对象进行抽象形成类，通过类的封装、继承和多态性实现代码的复用和模块化。


## 对象和类的回顾

在 @sec-objects-and-classes 中我们已经介绍了对象和类的概念，我们可以总结如下：

- 类（Class）：类是对一类事物的抽象描述，它定义了这种事物的静态特性（字段）和动态行为（方法）。类是创建对象的模板，对象是类的实例。
- 对象（Object）：对象是类的实例，即根据类的定义创建的实体。每个对象都有自己的属性（类变量和实例变量）和行为（方法）。
- 属性（Attribute）：属性是类或对象的特性，包括静态特性（字段）和动态行为（方法）。
- 方法（Method）：方法是类定义的一部分。方法定义了对象的动态行为，描述了对象如何响应外部的请求或如何完成某些具体的任务。

::: {.callout}
类似结构功能主义——在面向对象编程中，对象的字段就像是他的“结构”，而方法则如同他的“功能”。
:::

## 类的构建（功能部分）

一个最简单的类如下所示：
```{python}
class Person:
    pass  # An empty block

p = Person()
print(p)
```
我们使用`class`语句和类的名称创建一个新的类，然后是一个缩进的语句块，构成类的主体。在这里，用`pass`语句表示一个空的语句块，因为Python中的语句块不能为空。

类的名称后跟一对括号可以创建一个对象/实例。在实例代码中，我们通过`print(p)`语句来确认这个对象已经被创建。打印的结果说明这个对象是一个在 `__main__` 模块中的`Person`类的实例。

类的构建主要是通过定义类的方法实现的。方法描述了类或其实例可以进行的操作。在Python中，我们常常在类的内部定义方法，就像定义普通的函数那样。


### `self`在类方法中的作用

在Python中，类方法的第一个参数通常会是一个名为`self`的特殊参数，这个`self`参数代表方法的所属实例，或者说，将会调用这个方法的实例。通过self参数，方法可以自由地访问和修改对象的字段和其他方法。

::: {.callout}
在定义类的方法时，我们并不知道这个方法将来会被哪个实例对象调用。所以我们需要一个参数（习惯上叫做`self`）来接收运行时传入的实例对象，这样这个方法才能访问到实例的属性或者调用实例的其他方法。
:::
```{python}
class Dog:
    def __init__(self, name):
         self.name = name

    def bark(self):
         return f"{self.name} says woof!"

d1 = Dog("Fido")
d2 = Dog("Rex")

print(d1.bark())  # 输出 "Fido says woof!"
print(d2.bark())  # 输出 "Rex says woof!"

```

当一个实例调用其方法时，Python 解释器会自动将实例本身传入方法的`self`参数。通过`self`，我们可以在方法内部访问和修改实例的属性。

在这个例子中，`bark()`方法在`d1`和`d2`两个不同的实例中调用，`self`就代表了调用这个方法的实例，因此`self.name`会分别返回`d1`和`d2`的`name`属性。在每一次方法的调用中，Python都会自动地将当前的对象实例作为第一个参数传递进去。

::: {.callout}

```
rex.bark()
```

在这里，当我们调用`rex.bark()`时，从表面看，我们并没有给`bark`方法提供任何参数。但实际上，Python解释器会自动把`rex`这个实例传递给`bark`方法的`self`参数。这就是为何在类的方法最开始位置总会有一个`self`参数，而在调用方法时，我们通常并不需要显式地提供这个参数。

同理，这也意味着哪怕是一个不带参数的方法，他也仍然需要一个参数- `self` 
:::

### `__init__`方法：类的构造函数


### Method: 类的功能实现

## 字段（结构部分）


在类或对象中定义的变量被称为字段，用于描述对象的状态或性质。上述的静态特性就是指类或对象的字段。

::: {.callout}
**属性 = 字段+ 方法**
:::

字段有两种类型：

- 类变量：属于类，所有的对象实例共享这一个变量，一个对象修改了它，会影响到所有的对象。
- 实例变量：属于对象，每个对象实例都有自己的一份，一个对象修改了它，不会影响其他的对象。

### 



## 总结

### 面向对象编程的主要特点

面向对象编程（OOP）的主要特点是：

- 模块化：每一个对象都可以看作是一个独立的模块，它拥有自己的属性（也称为数据成员）和方法（也称为成员函数）。
- 可复用性：对象的代码可以在需要的地方复用，可以通过继承、封装、多态这些机制实现代码的重用。
- 扩展性：继承和多态性的机制提高了程序的可扩展性。

::: {.callout}
其他常见的编程范型：

面向过程编程（Procedural programming）：是最早的编程范型之一，它的主要思想是将程序分解为一步一步的过程或者函数，通过定义数据和函数的执行步骤来解决问题。


函数式编程（Functional Programming）：倡导编写纯函数，避免程序状态改变和数据可变性，以求更高的可理解性和更低的bug产生率。


逻辑编程（Logic Programming） ：通过描述问题的逻辑来编写程序，程序会自动推导出解决问题的答案。Prolog就是一种逻辑编程语言。
:::


