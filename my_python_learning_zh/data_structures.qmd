# 数据结构

Python 中，几种内建数据结构分别是:

- 列表（List）
- 元组（Tuple）
- 集合（Set）
- 字典（Dictionary）

## 列表（List）

Python 的列表类似于其他编程语言中的数组，但是比这些数组更灵活。列表中的元素不一定要是相同的数据类型。

列表用方括号 `[]` 包围元素，并用逗号 `,` 分割。

```{python}
my_list = [1, "apple", 3.14]
print(my_list[0]) # prints: 1
```

列表：

- 是有序的
- 是可变的
- 可以包含任何类型的元素
- 可以通过索引访问元素，索引从0开始

::: {.callout}
注意, Python的索引是从0开始。这意味着在使用索引访问列表元素时，列表中的第一个元素是 `list[0]`，第二个元素是 `list[1]`，以此类推。
:::


## 元组（Tuple）

元组是有序的、不可变的列表。可以理解为一种“只读”版本的列表。

元组用括号 `()` 包围元素，并用逗号 `,` 分割。

```{python}
my_tuple = (1, "apple", 3.14)
print(my_tuple[0]) # prints: 1
```

元组：

- 是有序的
- 是不可变的
- 可以包含任何类型的元素
- 可以通过索引访问元素，索引从0开始

下面是一个体现元组和列表的差别的代码示例
```{python}
# 创建一个列表
my_list = [1, 2, 3]
# 在列表末尾添加一个元素
my_list.append(4)
print(my_list[3])
# 创建一个元组
my_tuple = (1, 2, 3)
# 不能修改元组
# my_tuple.append(4)  # 这样会报错
```

## 集合（Set）

集合是非有序的数据结构，它不允许重复元素。

集合用花括号`{}`包围元素，并用逗号 `,` 分割。


```{python}
my_set = {1, "apple", 3.14, "apple"}
print(my_set) # prints: {1, "apple", 3.14}
```

集合:

- 是无序的
- 集合中元素不能重复
- 可以包含任何类型的元素
- 不能通过索引访问元素

## 字典（Dictionary）

字典是一个无序的键值对集合。

"键值对"（Key-Value Pair）指的是两个关联的部分：一个是唯一的键（Key），另一个是值（Value）。每个键都有一个关联的值。这种关联叫做"映射"。

字典使用花括号`{}`包围元素，键值之间用冒号`:`分隔，而键值对之间用逗号`,`分隔。

::: {.callout}
# 为什么叫字典

在一本实体字典中，你可以根据词条（对应于计算机中的“键”）找到对应的解释或者翻译（对应于计算机中的“值”）。这构成了一个"词条-解释"对，与计算机科学中的"键-值对"类似。

因此，考虑到这种映射关系，计算机科学中的这种包含"键-值对"的数据结构，就被命名为字典（Dictionary）。
:::

```{python}
my_dict = {
    "name": "apple",
    "color": "red",
}
print(my_dict["name"]) # prints: apple

ages = {
    "Tom": 30, 
    "Alice": 25, 
    "Bob": 27
}

print(ages["Alice"]) # 输出：25
ages["Tom"] = 31  # 将Tom的年龄改为31
print(ages["Tom"]) # 输出：31

```


字典:

- 是无序的
- 键值对中的键是唯一的,但值可以重复
- 可以包含任何类型的元素
- 通过键来访问元素
