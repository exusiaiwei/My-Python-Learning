{
  "hash": "ff80e59346e0af89b16beed7907e2b49",
  "result": {
    "engine": "jupyter",
    "markdown": "# 标准库\n\nPython标准库是每个Python安装的一部分，它包含了许多有用的模块，包括操作文件、字符串处理、网络通信、日期和时间处理、数学、科学、加密等等。\n\n熟悉Python标准库的模块，可以帮助我们更快速的编写程序，提高开发效率。\n\n让我们探索一些常用的标准库模块。\n\n## `sys`模块\n\n`sys`模块提供了一些变量和函数，用于与Python解释器进行交互。\n\n### `sys.argv`\n\n正如我们在 @sec-sys 看到的，`sys.argv`是一个包含命令行参数的列表。\n\n我们在此总结一下：\n\n- `sys.argv[0]`是脚本的名称\n- `sys.argv[1]`是第一个参数\n- `sys.argv[2]`是第二个参数\n- `sys.argv`的长度是命令行参数的个数\n\n下面是一个简单的例子：\n\n::: {#3ef70264 .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\n\nprint(sys.argv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['c:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\ipykernel_launcher.py', '-f', 'C:\\\\Windows\\\\Temp\\\\tmp79v95aph.json', '--HistoryManager.hist_file=:memory:']\n```\n:::\n:::\n\n\n### `sys.version`\n\n`sys.version`包含了Python解释器的版本信息。\n\n::: {#fd99e8a8 .cell execution_count=2}\n``` {.python .cell-code}\nimport sys\n\nprint(sys.version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.11.8 | packaged by conda-forge | (main, Feb 16 2024, 20:40:50) [MSC v.1937 64 bit (AMD64)]\n```\n:::\n:::\n\n\n`sys`模块有一个名为`version_info`的元组，它包含了Python解释器的版本信息。\n\n### `sys.path`\n\n`sys.path`是一个包含了模块搜索路径的列表。\n\n::: {#9a93d7e2 .cell execution_count=3}\n``` {.python .cell-code}\nimport sys\n\nprint(sys.path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['c:\\\\Conda_data\\\\envs\\\\main\\\\python311.zip', 'c:\\\\Conda_data\\\\envs\\\\main\\\\DLLs', 'c:\\\\Conda_data\\\\envs\\\\main\\\\Lib', 'c:\\\\Conda_data\\\\envs\\\\main', '', 'c:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages', 'c:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\win32', 'c:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\win32\\\\lib', 'c:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\Pythonwin']\n```\n:::\n:::\n\n\n## `os`模块\n\n`os`模块提供了许多与操作系统交互的函数。\n\n常见的操作包括：获取当前工作目录、更改目录、创建目录、删除目录、删除文件等。\n\n\n### `os.getcwd()`\n\n`os.getcwd()`返回当前工作目录。\n\n::: {#853d1fea .cell execution_count=4}\n``` {.python .cell-code}\nimport os\n\nprint(os.getcwd())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Code\\MyProjects\\My-Python-Learning\n```\n:::\n:::\n\n\n### `os.listdir()`\n\n`os.listdir()`返回指定目录下的文件和目录列表。\n\n::: {#52964496 .cell execution_count=5}\n``` {.python .cell-code}\nimport os\n\nprint(os.listdir())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['.git', '.github', '.gitignore', '.quarto', 'basic.qmd', 'control_flow.qmd', 'data_structures.qmd', 'docs', 'exceptions.qmd', 'exceptions_files', 'functions.qmd', 'index.qmd', 'input_and_output.qmd', 'LICENSE', 'modules.qmd', 'more.qmd', 'object_oriented_programming.qmd', 'operators_and_expressions.qmd', 'practical_code', 'problem_solving.qmd', 'python-logo-only.svg', 'README.md', 'README.zh-CN.md', 'references.bib', 'references.qmd', 'standard_library.ipynb', 'standard_library.qmd', 'standard_library_files', '_book', '_quarto.yml']\n```\n:::\n:::\n\n\n### `os.mkdir()`\n\n`os.mkdir()`创建一个新目录。\n\n```python\nimport os\n\nos.mkdir(r'practical_code/standard_library/newdir')\n```\n\n### `os.remove()`\n\n`os.remove()`删除一个文件。\n\n```python\nimport os\n\nos.remove(r'practical_code/standard_library/newdir')\n```\n\n### `os.rmdir()`\n\n`os.rmdir()`删除一个目录。\n\n```python\nimport os\n\nos.rmdir(r'practical_code/standard_library/newdir')\n```\n\n## `logging`模块\n\n`logging`模块提供了一个灵活的方式来记录日志信息。\n\n`logging`模块的基本语法如下：\n\n::: {#f98894c1 .cell execution_count=6}\n``` {.python .cell-code}\nimport logging\n\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message')\nlogging.critical('This is a critical message')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message\nERROR:root:This is an error message\nCRITICAL:root:This is a critical message\n```\n:::\n:::\n\n\n此外，`logging`模块还提供了一些配置选项，可以将日志信息输出到指定位置，或者指定日志的格式、等级等。\n\n以下是一个更复杂一点的例子：\n\n::: {#ac9a7c4e .cell execution_count=7}\n``` {.python .cell-code}\nimport os\nimport logging\n\nlogging_file = os.path.join(os.getcwd(), 'practical_code/standard_library/logging.log')\n\nprint(\"Logging to\", logging_file)\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    filename=logging_file,\n    filemode='w'\n)\n\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLogging to C:\\Code\\MyProjects\\My-Python-Learning\\practical_code/standard_library/logging.log\n```\n:::\n:::\n\n\n在上述的示例代码中：\n\n- `logging_file`是日志文件的路径，这里配置为`practical_code/standard_library/logging.log`\n- `logging.basicConfig()`函数用于配置日志的格式、等级、输出位置等\n- `logging.debug()`、`logging.info()`、`logging.warning()`等函数用于记录日志信息\n- `filemode='w'`表示以写入模式打开日志文件，如果文件已经存在，会被覆盖\n- `%(asctime)s`、`%(name)s`、`%(levelname)s`、`%(message)s`是日志格式的占位符，分别表示日志记录的时间、日志记录的名称、日志的等级、日志的信息\n\n## 每周模块系列\n\n除了上述介绍的模块外，还有许多其他有用的标准库模块，例如调试、测试、文件处理、网络通信、日期和时间处理、数学、科学、加密等等。\n\n此外，Doug Hellmann的[Python模块每周精选](https://pymotw.com/3/)是一个很好的资源，它介绍了Python标准库中的许多模块。\n\n",
    "supporting": [
      "standard_library_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}