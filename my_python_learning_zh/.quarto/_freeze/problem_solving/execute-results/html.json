{
  "hash": "f61705578d8236c01442cf58d23103fd",
  "result": {
    "engine": "jupyter",
    "markdown": "# 问题解决\n编程的最终目的是利用程序解决某个具体的问题。\n\n## 软件开发流程\n软件开发的一个基本流程是：\n\n1. 分析（What）：定义我们要解决的问题\n2. 设计（How）：确定实现目标的方法\n3. 实施（Do It）：首先从一个简单版本开始，将核心功能实现出来\n4. 测试和调试（Test）：验证程序是否按照期望运行，找出并修复程序中的错误和问题\n5. 使用（Operation or Deployment）：通过实际使用，观察程序的运行效果\n6. 改进（Maintain）：基于使用阶段的反馈进行，对程序进行优化和升级\n\n::: {.callout}\nSoftware is grown, not built. -- Bill de hÓra\n\n软件是成长的，而不是建造的。-- Bill de hÓra\n:::\n\n## 问题示例：备份程序\n\n《A Byte of Python》中给出的问题是：\n\n::: {.callout}\nI want a program which creates a backup of all my important files.\n\n我想要一个能够备份我所有重要文件的程序。\n:::\n\n其设计思路是：\n\n- 备份的文件和目录在列表中指定。\n- 备份必须存储在一个主备份目录中。\n- 文件被备份到一个zip文件中。\n- 压缩文件的名称是当前的日期和时间。\n- 使用标准的 zip 命令，该命令在任何标准的GNU/Linux或Unix发行版中都是默认可用的。请注意，只要具有命令行界面，您可以使用任何归档命令。\n\n## 知识点\n\n《A Byte of Python》本章的示例代码中有一些重要的知识点：\n\n### Python字符串格式化\n#### .format()方法\n`.format()`方法是一种字符串格式化方式，我们可以将值插入到字符串模板的占位符中。例如：\n\n::: {#edae3263 .cell execution_count=1}\n``` {.python .cell-code}\nname = \"Alice\"\nprint(\"Hello, {}\".format(name)) # 输出：Hello, Alice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice\n```\n:::\n:::\n\n\n在这段代码中，`{}` 是一个占位符，可以在`.format()`方法中传入变量name，它会被自动替换到占位符的位置。\n\n我们还可以在`{}`中添加数字，以指定`.format()`方法参数的位置：\n\n::: {#b15162cc .cell execution_count=2}\n``` {.python .cell-code}\nfirstname = \"Alice\"\nlastname = \"Bob\"\nprint(\"Hello, {0} {1}\".format(firstname, lastname)) # 输出：Hello, Alice Bob\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice Bob\n```\n:::\n:::\n\n\n这里的 `{0}` 和 `{1}` 分别对应`.format()`方法里的第一个和第二个参数。\n\n### f-string（格式化字符串字面值）\n在Python 3.6及以上版本中，我们通常使用f-string进行字符串格式化，它使字符串格式化更加简洁、高效。f-string的工作方式是，在字符串前面加上一个`f`或`F`，然后将要插入的变量或表达式写在 `{}` 之中，Python 会自动将其替换为它的值。例如：\n\n::: {#e670bade .cell execution_count=3}\n``` {.python .cell-code}\nname = \"Alice\"\nprint(f\"Hello, {name}\") # 输出：Hello, Alice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice\n```\n:::\n:::\n\n\n在 `{}` 中可以写入一些简单的Python表达式，Python会自动执行这些表达式并将结果替换到 `{}` 的位置：\n\n::: {#53b0a39a .cell execution_count=4}\n``` {.python .cell-code}\na = 5\nb = 10\nprint(f\"Five plus ten is {a + b}, not {2 * (a + b)}.\") # 输出：Five plus ten is 15, not 30.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFive plus ten is 15, not 30.\n```\n:::\n:::\n\n\n### 操作系统路径分隔符在Python中的使用\n在不同的操作系统中，文件路径的表示方法是不同的。在Windows系统中，我们习惯使用反斜线`\\`来表示路径，例如：`C:\\Users\\Admin\\Documents`。而在UNIX系统（比如Linux, MacOS）中，我们使用正斜线`/`来表示路径，例如：`/home/admin/Documents`。\n然而，在Python的字符串中，反斜线'\\'是一个特殊字符，被用作转义字符，用于引入特殊的字符序列。例如`\\n`表示换行，`\\t`表示制表符。例如：\n\n::: {#570476b6 .cell execution_count=5}\n``` {.python .cell-code}\nprint(\"Hello\\nWorld\") # 输出：\n# Hello\n# World\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\nWorld\n```\n:::\n:::\n\n\n因此，如果我们想在Python字符串中使用Windows路径，如`C:\\Users\\Admin\\Documents`，我们需要使用双反斜线`\\\\`来转义，例如`C:\\\\Users\\\\Admin\\\\Documents`。代码示例：\n\n::: {#00bade88 .cell execution_count=6}\n``` {.python .cell-code}\npath = \"C:\\\\Users\\\\Admin\\\\Documents\"\nprint(path) # 输出：C:\\Users\\Admin\\Documents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\Admin\\Documents\n```\n:::\n:::\n\n\n另外，我们可以使用Python的原始字符串来表示路径。原始字符串不会处理反斜线`\\`为特殊字符，我们只需在字符串前加上字符`r`即可。代码示例：\n\n::: {#7cd66b00 .cell execution_count=7}\n``` {.python .cell-code}\npath = r\"C:\\Users\\Admin\\Documents\"\nprint(path) # 输出：C:\\Users\\Admin\\Documents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\Admin\\Documents\n```\n:::\n:::\n\n\n但是，不推荐直接在字符串中使用单个反斜线`\\`来表示Windows路径，因为这很容易引入一些我们不想要的转义序列。例如，`\\U`开始的是一个Unicode转义序列，如果路径中恰好包含`\\U`，Python会尝试处理它为特殊字符序列，从而导致错误。所以，应尽量避免使用如`C:\\Users`这样的字符串。\n\n注意：在大多数情况下，我们推荐使用`os.path`模块来处理路径，这样可以确保你的代码在不同的操作系统中都能正确运行。\n\n## 其他问题\n\n与之难度相似的，可以作为新手入门的问题还有：\n\n- 一个能够整理我在多个文件夹下的文档，将它们根据类型（如.doc, .pdf等）分门别类地存放在不同的文件夹中的程序\n- 一个能够给我所有的图片按指定的大小进行缩放的程序\n- 一个能够统计一篇英文文章中每个单词出现次数的程序\n- 一个能够找出两个文件夹中相同的文件并列出的程序\n\n",
    "supporting": [
      "problem_solving_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}