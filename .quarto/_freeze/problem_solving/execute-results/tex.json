{
  "hash": "deadf591e1ebecf159e17e10799d9805",
  "result": {
    "engine": "jupyter",
    "markdown": "# Problem Solving  \n\nThe ultimate goal of programming is to utilize programs to solve specific problems.  \n\n## Software Development Process   \nA basic software development process is:  \n\n1. Analysis (What): Define the problem we want to solve  \n2. Design (How): Determine methods to achieve goals \n3. Implementation (Do It): Start from a simple version first, implement core functionalities  \n4. Testing and Debugging (Test): Verify program runs as expected, identify and fix errors  \n5. Operation or Deployment: Observe program behavior through actual usage   \n6. Maintenance: Optimize and upgrade program based on feedback from usage stage  \n\n::: {.callout}\nSoftware is grown, not built. -- Bill de hÓra\n\n软件是成长的,而不是建造的。-- Bill de hÓra  \n:::  \n\n## Problem Example: Backup Program  \n\nThe problem presented in \"A Byte of Python\" is:  \n\n::: {.callout} \nI want a program which creates a backup of all my important files.  \n\n我想要一个能够备份我所有重要文件的程序。\n:::  \n\nThe design idea is:  \n\n- Backup files and directories are specified in a list. \n- Backups must be stored in a main backup directory.   \n- Files are backed up into a zip file.  \n- Zip file name is current date and time.\n- Uses standard Linux/Unix zip command which is default available in any standard GNU/Linux or Unix distribution. Note you can use any archiving command if you have a CLI.  \n\n## Knowledge Points  \n\nSome key knowledge points from the sample code in this A Byte of Python chapter:  \n\n### Python String Formatting\n#### The `.format()` Method\nThe `.format()` method is a way of formatting strings where we can insert values into string template placeholders. For example:   \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nname = \"Alice\"\nprint(\"Hello, {}\".format(name)) # Prints: Hello, Alice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice\n```\n:::\n:::\n\n\nIn this code, `{}` is a placeholder where variable `name` can be passed into `.format()` method and automatically replaces the placeholder.  \n\nWe can also add numbers inside `{}` to specify positions of `.format()` method arguments:   \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfirstname = \"Alice\"\nlastname = \"Bob\"\nprint(\"Hello, {0} {1}\".format(firstname, lastname)) # Prints: Hello, Alice Bob\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice Bob\n```\n:::\n:::\n\n\nHere `{0}` and `{1}` correspond to first and second arguments of `.format()` method respectively.  \n\n### f-strings (Formatted String Literals)\nIn Python 3.6 and later, we usually use f-strings for string formatting, which makes formatting more concise and efficient. F-strings work by prefixing `f` or `F` before the string, then write variables or expressions to insert inside `{}`, Python automatically replaces them with values. For example:   \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nname = \"Alice\" \nprint(f\"Hello, {name}\") # Prints: Hello, Alice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice\n```\n:::\n:::\n\n\nWe can write simple Python expressions inside `{}`, Python executes them and replaces `{}` with the result:   \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\na = 5\nb = 10\nprint(f\"Five plus ten is {a + b}, not {2 * (a + b)}.\") # Prints: Five plus ten is 15, not 30.  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFive plus ten is 15, not 30.\n```\n:::\n:::\n\n\n### Using OS Path Separators in Python  \nFile path representations differ across operating systems. On Windows systems we use backslash `\\` for paths like `C:\\Users\\Admin\\Documents`. On UNIX systems (Linux, MacOS) forward slash `/` is used instead, e.g. `/home/admin/Documents`.   \n\nHowever in Python strings, backslash `\\` is a special character used as the escape character for introducing special character sequences. E.g. `\\n` for newline, `\\t` for tab. For example:  \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(\"Hello\\nWorld\") # Prints:  \n# Hello\n# World\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\nWorld\n```\n:::\n:::\n\n\nSo if we want to use Windows paths like `C:\\Users\\Admin\\Documents` in Python strings, we need to escape with double backslashes `\\\\` like `C:\\\\Users\\\\Admin\\\\Documents`. Code sample:   \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npath = \"C:\\\\Users\\\\Admin\\\\Documents\" \nprint(path) # Prints: C:\\Users\\Admin\\Documents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\Admin\\Documents\n```\n:::\n:::\n\n\nAdditionally, we can use Python raw strings that treat backslashes `\\` literally instead of escape characters. Just prefix string with `r`:   \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npath = r\"C:\\Users\\Admin\\Documents\"\nprint(path) # Prints: C:\\Users\\Admin\\Documents \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\Admin\\Documents\n```\n:::\n:::\n\n\nHowever it's not recommended to directly use single backslashes `\\` for Windows paths in strings, as unwanted escape sequences can easily be introduced, e.g. `\\U` starts a Unicode escape sequence, if this happens to appear in a path, Python tries to interpret it as special character sequence leading to errors. So best avoid paths like `C:\\Users`.   \n\nNote: In most cases, we recommend using the `os.path` module to handle paths for cross-platform portability.  \n\n## Other Problems  \n\nOther beginner-friendly problems with similar difficulty:  \n\n- A program that organizes my documents in multiple folders into types (.doc, .pdf etc) stored neatly into separate folders  \n- A program that resizes all my images to specified sizes\n- A program that counts word frequency for each word in an English article  \n- A program that finds identical files across two folders and lists them out\n\n",
    "supporting": [
      "problem_solving_files"
    ],
    "filters": []
  }
}