{
  "hash": "e4e10d9b0e0801a44d198dbb87711712",
  "result": {
    "engine": "jupyter",
    "markdown": "# Standard Library\n\nThe Python standard library comes with every Python installation and contains many useful modules including file handling, string processing, network communication, date/time handling, math/science, encryption etc.  \n\nFamiliarizing with standard library modules can help us program faster and improve efficiency.  \n\nLet's explore some commonly used standard library modules.\n\n## The `sys` Module  \n\nThe `sys` module provides variables and functions for interacting with the Python interpreter.  \n\n### `sys.argv`  \n\nAs we saw in @sec-sys, `sys.argv` is a list containing command line arguments.  \n\nWe summarize again here:  \n\n- `sys.argv[0]` is the script name  \n- `sys.argv[1]` is the first argument\n- `sys.argv[2]` is the second argument\n- Length of `sys.argv` is number of command line arguments\n\nA simple example:\n\n::: {#5cbd4bca .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\n\nprint(sys.argv) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['C:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\ipykernel_launcher.py', '-f', 'C:\\\\Windows\\\\Temp\\\\tmpcg7zx9fv.json', '--HistoryManager.hist_file=:memory:']\n```\n:::\n:::\n\n\n### `sys.version`  \n\n`sys.version` contains Python interpreter version info.\n\n::: {#eb093b09 .cell execution_count=2}\n``` {.python .cell-code}\nimport sys\n\nprint(sys.version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.11.8 | packaged by conda-forge | (main, Feb 16 2024, 20:40:50) [MSC v.1937 64 bit (AMD64)]\n```\n:::\n:::\n\n\n`sys` module has a tuple called `version_info` containing version info too.  \n\n### `sys.path`\n\n`sys.path` is a list containing module search paths.  \n\n::: {#87c78a17 .cell execution_count=3}\n``` {.python .cell-code}\nimport sys\n\nprint(sys.path)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['C:\\\\Conda_data\\\\envs\\\\main\\\\python311.zip', 'C:\\\\Conda_data\\\\envs\\\\main\\\\DLLs', 'C:\\\\Conda_data\\\\envs\\\\main\\\\Lib', 'C:\\\\Conda_data\\\\envs\\\\main', '', 'C:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages', 'C:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\win32', 'C:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\Conda_data\\\\envs\\\\main\\\\Lib\\\\site-packages\\\\Pythonwin']\n```\n:::\n:::\n\n\n## The `os` Module  \n\nThe `os` module provides many functions to interact with the operating system.  \n\nCommon operations include getting current working directory, changing directory, creating/deleting directories/files etc.  \n\n\n### `os.getcwd()`  \n\n`os.getcwd()` returns current working directory.  \n\n::: {#9095d1db .cell execution_count=4}\n``` {.python .cell-code}\nimport os\n\nprint(os.getcwd())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\WeiZichao\\OneDrive - MSFT\\Code\\MyProjects\\My-Python-Learning\n```\n:::\n:::\n\n\n### `os.listdir()`\n\n`os.listdir()` returns files and directories in the specified directory.  \n\n::: {#b2b8edfe .cell execution_count=5}\n``` {.python .cell-code}\nimport os\n\nprint(os.listdir())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['.git', '.gitignore', '.quarto', 'basic.qmd', 'control_flow.qmd', 'data_structures.qmd', 'docs', 'exceptions.qmd', 'functions.qmd', 'index.qmd', 'input_and_output.qmd', 'LICENSE', 'modules.qmd', 'more.qmd', 'object_oriented_programming.qmd', 'operators_and_expressions.qmd', 'practical_code', 'problem_solving.qmd', 'python-logo-only.svg', 'README.md', 'README.zh-CN.md', 'references.bib', 'references.qmd', 'standard_library.ipynb', 'standard_library.qmd', '_book', '_quarto.yml']\n```\n:::\n:::\n\n\n### `os.mkdir()`  \n\n`os.mkdir()` creates a new directory.  \n\n```python\nimport os\n\nos.mkdir(r'practical_code/standard_library/newdir') \n```\n\n### `os.remove()`  \n\n`os.remove()` deletes a file.  \n\n```python\nimport os\n\nos.remove(r'practical_code/standard_library/newdir')\n```  \n\n### `os.rmdir()`\n\n`os.rmdir()` deletes a directory.  \n\n```python \nimport os\n\nos.rmdir(r'practical_code/standard_library/newdir')\n```\n\n## The `logging` Module   \n\nThe `logging` module provides a flexible way to record log information.  \n\nBasic `logging` module syntax:  \n\n::: {#73381621 .cell execution_count=6}\n``` {.python .cell-code}\nimport logging\n\nlogging.debug('This is a debug message')  \nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message') \nlogging.critical('This is a critical message')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message\nERROR:root:This is an error message\nCRITICAL:root:This is a critical message\n```\n:::\n:::\n\n\nAdditionally, the `logging` module also provides configuration options like outputting log messages to specified locations, specifying log format, log level etc.  \n\nA slightly more complex example:  \n\n::: {#f903cd82 .cell execution_count=7}\n``` {.python .cell-code}\nimport os\nimport logging\n\nlogging_file = os.path.join(os.getcwd(), 'practical_code/standard_library/logging.log')  \n\nprint(\"Logging to\", logging_file)  \n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    filename=logging_file,\n    filemode='w'  \n)\n\nlogging.debug('This is a debug message')\nlogging.info('This is an info message') \nlogging.warning('This is a warning message')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLogging to C:\\Users\\WeiZichao\\OneDrive - MSFT\\Code\\MyProjects\\My-Python-Learning\\practical_code/standard_library/logging.log\n```\n:::\n:::\n\n\nIn the above sample code:  \n\n- `logging_file` is path to log file, configured here as `practical_code/standard_library/logging.log`\n- `logging.basicConfig()` configures log format, level, output location etc.   \n- Functions like `logging.debug()`, `logging.info()`, `logging.warning()` etc record log messages\n- `filemode='w'` opens log file in write mode, overwriting existing files if any\n- `%(asctime)s`, `%(name)s`, `%(levelname)s`, `%(message)s` are log format placeholders for log timestamp, name, level and message respectively.  \n\n## Module of the Week Series  \n\nBesides the modules introduced above, there are many other useful standard library modules like debugging, testing, file handling, network communication, date/time handling, math/science, encryption etc.  \n\nAdditionally, Doug Hellmann's [Python Module of the Week](https://pymotw.com/3/) is a great resource introducing many modules in the Python standard library.\n\n",
    "supporting": [
      "standard_library_files"
    ],
    "filters": [],
    "includes": {}
  }
}