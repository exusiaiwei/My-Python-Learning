{
  "hash": "63b0489ea98329faf5c06c209e0dbeb6",
  "result": {
    "markdown": "# 控制流\n\n控制流是编程语言中用于控制程序执行顺序的机制。它允许程序根据条件或其他因素来决定执行哪些代码块。\n\n在 Python 中，常见的控制流结构包括：\n\n- 条件语句（`if-else` 语句）\n- 循环语句（`for` 循环和 `while` 循环）\n- 跳转语句（`break` 语句和 `continue` 语句）\n\n`if-else` 语句用于在满足特定条件时执行特定的代码块。\n\n`for` 循环和 `while` 循环是 Python 中的循环结构，`for` 循环用于遍历可迭代对象中的元素，`while` 循环用于在条件为真时重复执行代码块。\n\n`break` 语句和 `continue` 语句是 Python 的跳转语句，`break` 语句用于在满足特定条件时结束循环，`continue` 语句用于在满足特定条件时跳过此次循环的剩余部分，直接进入下一次循环。\n\n控制流的灵活性使得程序能够根据不同的条件和需求来执行不同的操作，从而实现更复杂的逻辑和功能。\n\n## `if` 语句\n\n条件语句允许根据条件的真假来执行不同的代码块。`if` 语句用于执行条件为真时的代码块，而 `else` 语句用于执行条件为假时的代码块。\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# 示例代码来源： A Byte of Python\n# 我们这里先定义一下猜测的值，而非通过input来获取值\n# 这是由于Quarto和Jupyter Notebook这类环境无法处理中间输入（input）\n# 这两个环境都被设计为批量执行代码的模式，一旦所有的cell开始执行，它们就能完成所有的运行，无需人工干预\n# 所以，我们这里直接设定一个值，而非通过input来获取这个值\nguess = 20  \n\nnumber = 23\n\nprint('你的猜测是：', guess)\n\nif guess == number:\n    print('恭喜你，你猜对了。')\n    print('（但你没有赢得任何奖品！）')\nelif guess < number:\n    # 另一个代码块\n    print('不对，它比那个数稍微大一点')\n    # 你可以在代码块中做任何你想做的事情...\nelse:\n    print('不对，它比那个数稍微小一点')\n    # 你必须猜大于number才能到达这里\n\nprint('完成')\n# 这个最后的语句总是会被执行，\n# 在if语句执行之后。\n\n# 如果你想在其他环境（如标准Python环境或IDLE）中获得用户输入，\n# 你可以将第五行的代码改为 \"guess = int(input('请输入一个整数：'))\"。\n# 这样就能接收用户的输入作为 'guess' 的值，然后进行后续的判断。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n你的猜测是： 20\n不对，它比那个数稍微大一点\n完成\n```\n:::\n:::\n\n\n示例代码中的知识点：\n\n- `input` 函数会将一个字符串打印到屏幕上并等待输入，在输入内容后，`input()` 函数会将输入的内容作为一个字符串返回。\n- `int` 是一个类，在这里它用于将字符串转换为整数。如果需要转化为浮点数则用 `float`。\n- 缩进级别用于将语句分类为不同的代码块。应当遵循一致的缩进原则。\n- `if`，`elif` 和 `else` 语句在逻辑行的末尾必须有一个冒号，后面跟着对应的代码块。\n- `elif` 语句是将两个相关的 `if` `else-if` `else` 合并成一个组合的 `if-elif-else` 语句。可以简化程序和缩进量。\n- 可以在一个 `if` 语句里嵌套另一个 `if` 语句，这被称为嵌套的 `if` 语句。\n- `elif` 和 `else` 语句是可选的。一个 `if` 可以在只有 `if` 部分的情况下生效。\n\n## `while`语句\n\n`while`语句允许在条件为真时重复执行一组语句。`while`语句是一种循环语句，可以包括一个可选的`if`语句。\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# 示例代码来源： A Byte of Python\nnumber = 23\nrunning = True\n\n# 由于我们无法在Quarto或Jupyter环境中使用input()函数，这里我们设定了一个预设的猜测值列表\nguesses = [20, 25, 23]  \nguesses_iter = iter(guesses)  # 创建一个迭代对象 \n\nwhile running:\n    # 在Quarto和Jupyter环境中，'input()' 函数需要改写为从预设列表中迭代猜测值\n    guess = next(guesses_iter)\n    print('你的猜测是：', guess)\n\n    if guess == number:\n        # 如果猜测值等于设定值，则输出猜对了，并终止while循环\n        print('恭喜你，你猜对了。')\n        running = False\n    elif guess < number:\n        # 结果也会显示预设猜测值偏小\n        print('不对，它比那个数稍微大一点')\n    else:\n        # 结果也会显示预设猜测值偏大\n        print('不对，它比那个数稍微小一点')\n\nprint('完成')\n\n# 迭代器 'guesses_iter' 遍历完所有guesses后，程序就会结束\n# 在实际的Python环境或IDLE中运行时，你可以取消 'guess = next(guesses_iter)' 这一行的注释\n# 并将 'guess = int(input('请输入一个整数 : '))' 这一行注释去掉，将 'guesses' 与 'guesses_iter'注释掉\n# 这样就能通过用户输入来获取猜测值，并通过持续的while循环来实现用户的持续猜测\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n你的猜测是： 20\n不对，它比那个数稍微大一点\n你的猜测是： 25\n不对，它比那个数稍微小一点\n你的猜测是： 23\n恭喜你，你猜对了。\n完成\n```\n:::\n:::\n\n\n示例代码中的知识点：\n\n- 在 `while` 循环之前将变量 `running` 设置为 `True`，程序会先检查变量 `running` 是否为 `True`，然后继续执行相应的 `while` 块。\n- 执行完块之后，再次检查条件（即变量 `running`）。\n- 如果条件为真，则再次执行 `while` 块。\n- 如果条件为假，则执行可选的 `else` 块，然后继续下一条语句。\n- 如果 `while` 循环有一个 `else` 子句，除非使用 `break` 语句跳出循环，否则它总是会被执行。\n- `True` 和 `False` 被称为布尔类型，可以分别视作值 1 和 0 的等价物。\n\n## `for` 循环\n\n`for..in` 语句是另一种循环语句，它遍历一个对象序列，即逐个遍历序列中的每个项目。\n\n就现在的进度，序列可以被视作一个有序的项目集合。\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# 示例代码来源： A Byte of Python\nfor i in range(1, 5):\n    print(i)\nelse:\n    print('for循环结束')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\nfor循环结束\n```\n:::\n:::\n\n\n示例代码中的知识点：\n\n- 内置函数 `range` 可以生成数字序列。\n- 默认情况下，`range` 的步长为 1。给 `range` 提供的第三个数字将成为步长，例如 `range(1,5,2)` 给出了 `[1,3]`。不包括第二个数字（即结尾数字）。\n- `range` 一次只生成一个数字，如果需要完整的数字列表需要调用 `list()`。\n- `for` 循环中的 `else` 部分是可选的。若包含，除非使用 `break` 语句跳出循环，否则它总是会被执行。\n- 尽管示例代码仅演示了数字列表，但 `for` 循环适用于任何类型的对象构成的序列。\n\n## `break` 语句\n\n`break` 语句被称为跳转语句，可以停止执行循环语句，即使循环条件尚未为 False 或者项的序列尚未完全迭代完成。\n\n如果跳出一个 `for` 或 `while` 循环，相应的循环 `else` 块不会被执行。\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# 示例代码来源： A Byte of Python\n# 设定预设的输入列表\ninputs = ['你好', 'abcdef', '12345', '退出']\n\n# 创建一个迭代器\ninputs_iter = iter(inputs)\n\nwhile True:\n    # 从预设的输入列表中获取输入\n    s = next(inputs_iter)\n\n    print('输入的字符串是: ', s)\n    if s == '退出':\n        break\n    print('字符串的长度是', len(s))\nprint('完成')\n\n# 这里我们通过预设的输入列表和迭代器来模拟用户的输入\n# 在每次循环中，我们从列表中获取一个输入，并检查这个输入是否等于'退出'，如果是就结束循环\n# 否则，我们就输出这个输入的长度\n# 这样就可以在Quarto或Jupyter这类不支持`input()`函数的环境中运行，如果在实际的Python环境或IDLE中运行时，\n# 可以将 's = next(inputs_iter)' 这一行注释掉，将 's = input('输入点什么: ')' 这一行的注释去掉，\n# 同时将 'inputs' 与 'inputs_iter' 注释，即可恢复到原先的状态。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n输入的字符串是:  你好\n字符串的长度是 2\n输入的字符串是:  abcdef\n字符串的长度是 6\n输入的字符串是:  12345\n字符串的长度是 5\n输入的字符串是:  退出\n完成\n```\n:::\n:::\n\n\n示例代码中的知识点：\n\n- 内置的 `len` 函数可以测量输入字符串的长度。\n- `break` 语句也可以与 `for` 循环一起使用。\n\n## `continue` 语句\n\n`continue` 语句用于跳过当前循环块中的其余语句，并继续下一次循环的迭代。\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# 示例代码来源： A Byte of Python\n# 设定预设的输入列表\ninputs = ['你好', 'abcdef', '12', '1234', '退出']\n\n# 创建一个迭代器\ninputs_iter = iter(inputs)\n\nwhile True:\n    # 从预设的输入列表中获取输入\n    # s = input('输入点什么: ')\n    s = next(inputs_iter)\n\n    print('输入的字符串是: ', s)\n    if s == '退出':\n        break\n    if len(s) < 3:\n        print('太短了')\n        continue\n    print('输入长度足够')\n    # 你可以在代码块中做任何你想做的事情...\nprint('完成')\n\n# 这段代码在Quarto和Jupyter环境下都能够顺利运行。在每次循环中，它会从预设的字符串列表中获取一个输入，然后根据这个输入的长度执行不同的操作：\n# 1. 如果输入是'退出'，那么它会结束整个循环；\n# 2. 如果输入的长度小于3，那么它会打印'太短了'，并且跳过此次循环剩下的部分，直接开始下一次循环；\n# 3. 如果输入的长度不小于3，那么它会打印'输入长度足够'。\n# 可以将 's = next(inputs_iter)' 这一行注释掉，将 's = input('输入点什么: ')' 这一行的注释去掉，\n# 同时将 'inputs' 与 'inputs_iter' 注释，即可恢复到原先的状态。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n输入的字符串是:  你好\n太短了\n输入的字符串是:  abcdef\n输入长度足够\n输入的字符串是:  12\n太短了\n输入的字符串是:  1234\n输入长度足够\n输入的字符串是:  退出\n完成\n```\n:::\n:::\n\n\n",
    "supporting": [
      "control_flow_zh_files\\figure-pdf"
    ],
    "filters": []
  }
}