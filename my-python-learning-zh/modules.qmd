# 模块
## 基本概念

在 Python 中，模块是一种组织和重用代码的方式。一个模块是一个包含了函数、类和变量的文件，它可以被其他程序导入和使用。

模块的基本概念是将相关的代码组织在一起，以便于维护和重用。通过将代码分割成模块，可以提高代码的可读性和可维护性。

模块具有以下特性：

- 封装：模块将相关的代码封装在一个单独的文件中，使得代码更加有组织和易于管理。
- 命名空间：模块创建了一个独立的命名空间，避免了命名冲突。通过使用模块名作为前缀，可以访问模块中定义的函数、类和变量。
- 代码重用：模块可以被其他程序导入和使用，实现了代码的重用。通过导入模块，可以直接使用模块中定义的函数、类和变量，而无需重新编写代码。
- 可扩展性：模块可以根据需要进行扩展和修改。可以在模块中添加新的函数、类和变量，以满足不同的需求。

在 Python 中，模块可以是 Python 编写的，也可以是用 C/C++ 等其他编程语言编写并编译成二进制代码的。后者通常被称为"编译的模块"，或者"扩展模块"。

它们通常用于提高性能（因为编译后的代码运行速度更快），或者提供Python不能直接提供的功能（比如调用操作系统的底层API）。

模块使用方法参考如下的代码示例：

```{python}

import sys

print("The script has the name %s" % (sys.argv[0]))
if len(sys.argv) > 1:
    print("It has some arguments:")
    for arg in sys.argv[1:]:
        print(arg)

print('\n\nThe PYTHONPATH is', sys.path, '\n')
```

当 Python 执行 import 语句时，Python 解释器会通过以下步骤寻找需要 import 的对象。

1. 首先，解释器会检查内建模块（built-in modules）。Python的内建模块是用C编写的，并链接到Python解释器中。例如示例代码中使用的 `sys` 就是内建模块。
2. 如果模块不在内建模块中，Python 解释器接着会检查 `sys.modules` 字典。`sys.modules` 字典储存了所有导入模块的路径名称和模块对象。可以将其理解为 Python 已经导入模块的一个历史记录或缓存。如果模块之前已经被导入，则直接从这个字典中获取。
3. 如果在 `sys.modules` 中也找不到，Python解释器接下来会查看 `sys.path` 列表。sys.path列表包含了Python解释器搜索模块的位置，包括：
   1. 程序执行的当前目录，即程序启动时所在的目录。运行 import os; print(os.getcwd()) 以查找程序的当前目录。
   2. 一些 Python 的标准库目录
   3. 额外安装的第三方包的路径。通常位于 site-packages 目录下。
4. Python会在sys.path中列出的目录从上到下按顺序搜索模块。它会检查每一个目录，看是否含有需要导入的模块。如果在所有目录中都找不到，那么Python会引发一个ModuleNotFoundError。

sys 模块包含与Python解释器及其环境（即系统）相关的功能。

- sys.argv是Python中的一个列表，它包含了从命令行传递给Python脚本的参数。
- 这些参数是以字符串的形式存储的，其中sys.argv[0]是脚本的名称（即执行的Python文件名），其余的sys.argv[1], sys.argv[2]...依次是外部传入的参数。
- 在 sys 模块中，可以使用点表示法访问 argv 变量，即 sys.argv 。这样可以清晰地表明 argv 变量是sys模块的一部分，同时避免和程序中所使用的任何argv变量冲突。

## 字节编译的 .pyc 文件

