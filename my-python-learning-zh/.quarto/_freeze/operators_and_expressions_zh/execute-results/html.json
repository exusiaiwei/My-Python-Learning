{
  "hash": "1cbc1002b4f51fbd18cdfb14369324ae",
  "result": {
    "markdown": "# 运算符和表达式\n\n运算符是用于执行特定操作的符号或关键字。在Python中，有多种类型的运算符，包括算术运算符、比较运算符、逻辑运算符等。\n\n操作数是运算符所操作的数据。\n\n表达式是由运算符和操作数组成的组合，用于计算和生成值。在Python中，表达式可以是简单的算术表达式，也可以是复杂的逻辑表达式。\n\n例如，一个表达式的示例是`2 + 3`,其中运算符为`+`,操作数为`2`，`3`。\n\n\n## 运算符\n### 1. 算术运算符：\n\n- 加法运算符（`+`）：用于将两个值相加。可以处理数值，字符串和列表等类型。\n- 减法运算符（`-`）：用于将一个值减去另一个值。如果第一个操作数缺失，默认为0。\n- 乘法运算符（`*`）：用于将两个值相乘。用于处理字符串时，则返回重复固定次数的字符串。\n- 除法运算符（`/`）：用于将一个值除以另一个值。\n- 取模运算符（`%`）：用于计算两个值相除的余数。\n- 幂运算符（`**`）：用于计算一个值的指数。\n- 整除运算符（`//`）：用于计算两个值相除的整数部分。答案会向下取整到最近的整数值；如果其中有操作数是浮点数，则答案会是浮点数。\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# 加法运算符\nx1 = 2 + 3\nprint(x1)\nx2 = \"a\" + \"b\"\nprint(x2)\n# 减法运算符\ny1 = 3 - 2\nprint(y1)\ny2 = - 2\nprint(y2)\n# 乘法运算符\na1 = 5 * 6\nprint(a1)\na2 = \"my\" * 6\nprint(a2)\n# 除法运算符\nb = 50 / 25\nprint(b)\n# 取模运算符\nc1 = 26 % 3\nprint(c1)\nc2 = -25.5 % 2.25\nprint(c2)\n# 幂运算符\nd= 2 ** 3\nprint(d)\n# 整除运算符\ne1 = 28 // 3\nprint(e1)\ne2 = 9//1.8\nprint(e2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\nab\n1\n-2\n30\nmymymymymymy\n2.0\n2\n1.5\n8\n9\n4.0\n```\n:::\n:::\n\n\n### 2. 比较运算符：\n\n- 等于运算符（`==`）：用于检查两个值是否相等。\n- 不等于运算符（`!=`）：用于检查两个值是否不相等。\n- 大于运算符（`>`）：用于检查一个值是否大于另一个值。\n- 小于运算符（`<`）：用于检查一个值是否小于另一个值。\n- 大于等于运算符（`>=`）：用于检查一个值是否大于或等于另一个值。\n- 小于等于运算符（`<=`）：用于检查一个值是否小于或等于另一个值。\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\na = 1 == 1\nprint(a)\nb = 1 != 1\nprint(b)\nc = 2 > 1\nprint(c)\nd = 2 < 1\nprint(d)\ne = 2 >= 2\nprint(e)\nf = 1 <= 2\nprint(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\n```\n:::\n:::\n\n\n### 3. 逻辑运算符（布尔运算符）：\n\n- 与运算符（`and`）：用于检查多个条件是否同时为真。只有当所有条件都为真时，结果才为真。\n- 或运算符（`or`）：用于检查多个条件是否至少有一个为真。只要有一个条件为真，结果就为真。\n- 非运算符（`not`）：用于对条件进行取反。\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# 与运算符（and）：只有当所有条件都为真时，结果才为真\na = True and True\nprint(a)  # 输出：True\n\nb = True and False\nprint(b)  # 输出：False\n\n# 或运算符（or）：只要有一个条件为真，结果就为真\nc = True or False\nprint(c)  # 输出：True\n\nd = False or False\nprint(d)  # 输出：False\n\n# 非运算符（not）：对条件进行取反\ne = not True\nprint(e)  # 输出：False\n\nf = not False\nprint(f)  # 输出：True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\n```\n:::\n:::\n\n\n短路评估：当使用逻辑运算符（如`and`和`or`）连接多个条件表达式时，Python会根据运算符的特性来决定是否对所有条件进行求值。\n- `and`运算中，只要任意一个条件为False，则整个表达式必然为False，此时Python会停止计算后面的值并立刻返回False。\n- `or`运算中，只要任意一个条件为True，则整个表达式必然为True，此时Python会停止计算后面的值并立刻返回True。\n- \n短路评估可以提高代码的效率和性能，避免了不必要的运算和求值。\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# 短路评估的示例\na = 4\nb = 0\n\nif b != 0 and a / b < 1:\n    print(\"条件满足\")\nelse:\n    print(\"条件不满足\")    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n条件不满足\n```\n:::\n:::\n\n\n在上面的示例中，通过短路评估，在`b != 0 `这一步判断整体结果为False，进而跳过执行后面的`a / b`的除以0运算，避免了出现错误。如果不适用短路评估，会先判断`b != 0 `为False，进而执行除法运算，会出现除以0错误。\n\n### 4. 位运算符：\n\n位（bit）：存储、处理数据的最小单位。一位只能存储0或1这两个可能的值。计算机中的数字以二进制（即由0和1组成）的方式储存。\n\n位移：位移是用来修改数字位值的操作。位移分为左移和右移，左移是在原数右边添加一个0，右移是把最右边一位去掉。\n\n- 在十进制中，向左移动一位（即在尾部添加一个0）表示乘以10，向右移动一位（即去掉尾部的数字）表示除以10。\n- 在二进制中，向左移动一位（即在尾部添加一个0）表示乘以2，向右移动一位（即去掉尾部的数字）表示除以2。\n\n位运算符\n\n- 按位与运算符（`&`）：用于对两个值进行按位与操作。如果对应的两个二进制位都为1，则该位的结果值为1，否则0。\n- 按位或运算符（`|`）：用于对两个值进行按位或操作。如果对应的两个二进制位有一个为1，则该位的结果值为1，否则0。\n- 按位异或运算符（`^`）：用于对两个值进行按位异或操作。如果对应的两个二进制位一个为1，另一个为0，则该位结果值为1，否则0（即同为0或者同为1则结果为0）\n- 按位取反运算符（`~`）：用于对一个值进行按位取反操作。对一个二进制数按位取反，即将0变1，1变0。x的按位取反是-(x+1)。\n- 左移运算符（`<<`）：用于将一个值向左移动指定的位数。\n- 右移运算符（`>>`）：用于将一个值向右移动指定的位数。\n\n位运算符是操作二进制位的，不过在实际的编程过程中，使用并不频繁，所以在此处我只给出了简单的解释和例子。\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# 定义两个变量\na = 60  # 60的二进制表示为0011 1100\nb = 13  # 13的二进制表示为0000 1101\n\nprint(a, \"的二进制表示为\", bin(a))\nprint(b, \"的二进制表示为\", bin(b))\n\nprint(\"a & b =\", a & b)  # 按位与运算。二进制结果0000 1100，对应十进制为12\nprint(\"a | b =\", a | b)  # 按位或运算。二进制结果0011 1101，对应十进制为61\nprint(\"a ^ b =\", a ^ b)  # 按位异或运算。二进制结果0011 0001，对应十进制为49\nprint(\"~a =\", ~a)  # 按位取反运算。二进制结果1100 0011，对应十进制为-61（注意：是负数）\n\nprint(\"a << 2 =\", a << 2)  # 左移2位运算。二进制结果1111 0000，对应十进制为240\nprint(\"a >> 2 =\", a >> 2)  # 右移2位运算。二进制结果0000 1111，对应十进制为15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n60 的二进制表示为 0b111100\n13 的二进制表示为 0b1101\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2 = 15\n```\n:::\n:::\n\n\n### 5. 赋值运算符：\n- 简单赋值运算符（`=`）：用于将一个值赋给一个变量。\n- 加法赋值运算符（`+=`）：用于将一个值与一个变量相加，并将结果赋给该变量。\n- 减法赋值运算符（`-=`）：用于将一个值从一个变量中减去，并将结果赋给该变量。\n- 乘法赋值运算符（`*=`）：用于将一个值与一个变量相乘，并将结果赋给该变量。\n- 除法赋值运算符（`/=`）：用于将一个值除以一个变量，并将结果赋给该变量。\n- 取模赋值运算符（`%=`）：用于计算两个值相除的余数，并将结果赋给一个变量。\n- 幂赋值运算符（`**=`）：用于计算一个值的指数，并将结果赋给一个变量。\n- 整除赋值运算符（`//=`）：用于计算两个值相除的整数部分，并将结果赋给一个变量。\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# 简单赋值运算符（=）\na = 10\nprint(\"a =\", a)  # 输出：a = 10\n\n# 加法赋值运算符（+=）\na += 2\nprint(\"a =\", a)  # 输出：a = 12\n\n# 减法赋值运算符（-=）\na -= 2\nprint(\"a =\", a)  # 输出：a = 10\n\n# 乘法赋值运算符（*=）\na *= 2\nprint(\"a =\", a)  # 输出：a = 20\n\n# 除法赋值运算符（/=）\na /= 2\nprint(\"a =\", a)  # 输出：a = 10.0\n\n# 取模赋值运算符（%=）\na %= 3\nprint(\"a =\", a)  # 输出：a = 1.0\n\n# 幂赋值运算符（**=）\na **= 3\nprint(\"a =\", a)  # 输出：a = 1.0\n\n# 整除赋值运算符（//=）\na = 10\na //= 3\nprint(\"a =\", a)  # 输出：a = 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na = 10\na = 12\na = 10\na = 20\na = 10.0\na = 1.0\na = 1.0\na = 3\n```\n:::\n:::\n\n\n## 表达式\n\n表达式是由运算符和操作数组成的组合，用于计算和生成值。\n\n在Python中，表达式可以是简单的算术表达式，也可以是复杂的逻辑表达式。\n\n例如，以下是一些常见的表达式示例：\n\n- 算术表达式：2 + 3 * 4\n- 逻辑表达式：(x > 5) and (y < 10)\n- 字符串拼接表达式：'Hello' + 'World'\n- 列表推导式：[x for x in range(10) if x % 2 == 0]\n\n表达式的值可以根据操作数的类型和运算符的规则进行计算。在计算表达式时，Python会按照一定的优先级和结合性来确定运算的顺序。\n\n### 计算顺序\n\n类似数学中的乘法优先级高于加法优先级，Python里的表达式也存在优先级之分。Python会先计算优先级较高的运算符和表达式，然后再计算优先级较低的表达式。\n\n对于复杂的表达式，虽然可以依靠记忆优先级规则来确保正确的运算顺序，但是为了代码的清晰和易读，一般建议显性地使用括号来标明运算顺序。\n\n在运算符具有相同的优先级时，计算顺序由它们的结合性确定。结合性可以是左结合或右结合。\n\n- 左结合意味着从左到右进行计算。常见的例子包括算术运算符（如加法、减法、乘法、除法等）、比较运算符和大多数位运算符。\n- 右结合意味着从右到左进行计算。常见的例子包括指数运算符、赋值运算符（`=`）和复合赋值运算符（如`+=`、`-=`、`*=`、`/=`、`%=`、`**=`、`//=`、`&=`、`^=`、`>>=`、`<<=`）。\n\n\n### 数学运算和赋值的快捷方式\n\n常见的做法是对变量进行数学运算，然后将运算结果赋值给变量，因此对于这种表达式有一个快捷方式。\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\na = 2\na = a * 3\nprint(\"a =\", a)\n\nb = 2\nb *= 3\nprint(\"b =\", b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na = 6\nb = 6\n```\n:::\n:::\n\n\n",
    "supporting": [
      "operators_and_expressions_zh_files"
    ],
    "filters": [],
    "includes": {}
  }
}