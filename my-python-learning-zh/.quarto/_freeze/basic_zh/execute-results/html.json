{
  "hash": "a3ee1f0c2bbdd779deff63a98294f041",
  "result": {
    "markdown": "# 基础\n\n## 数据类型\n\n### 字面常量\n\n字面常量是在代码中直接写入且在程序执行过程中不会改变的固定值。\n\n在Python中，有几种类型的字面常量，包括：\n\n- 数值字面常量：整数、浮点数和复数。\n- 字符串字面常量：用单引号（''）或双引号（\"\"）括起来的字符序列。\n- 布尔字面常量：True和False。\n- None：表示缺少值的特殊常量。\n\n 字面常量用于给变量赋值、进行计算和定义Python程序中的条件。\n\n 它们提供了一种直接在代码中表示固定值的方式，使程序更易于理解和维护。\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nx = 10  # 将整数字面常量赋值给变量\ny = 3.14  # 将浮点数字面常量赋值给变量\nname = 'John'  # 使用单引号括起来的字符串\nmessage = \"Hello, world!\"  # 使用双引号括起来的字符串\nis_active = True  # 将布尔字面常量赋值给变量\nempty_value = None  # 将None字面常量赋值给变量\n```\n:::\n\n\n### 字符串\n\n字符串是用于表示文本数据的数据类型。\n\n特性：\n\n- 在python中，可以用单引号和双引号指定字符串。\n- 三引号可以指定多行字符串。\n- 字符串的值不可以修改。\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# 创建字符串\nname = \"Alice\"\n\n# 连接字符串\ngreeting = \"Hello, \" + name + \"!\"\n\n# 输出字符串\nprint(greeting)  # 输出：Hello, Alice!\n\n# 获取字符串长度\nlength = len(name)\nprint(length)  # 输出：5\n\n# 截取字符串\nsubstring = name[1:3]\nprint(substring)  # 输出：li\n\n# 替换字符串\nnew_name = name.replace(\"A\", \"B\")\nprint(new_name)  # 输出：Blice\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\n5\nli\nBlice\n```\n:::\n:::\n\n\n#### 字符串的格式化函数\n\n字符串的format函数可以将相应参数传入字符串中。\n\n- 占位符为{}\n- 可以通过索引指定插入顺序，python从0开始计数。\n- 可以命名参数。\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nname = \"Alice\"\nage = 25\n\n# 使用占位符插入变量\ngreeting = \"Hello, my name is {} and I am {} years old.\".format(name, age)\nprint(greeting)  # 输出：Hello, my name is Alice and I am 25 years old.\n\n# 可以通过索引指定插入的顺序\ngreeting2 = \"Hello, my name is {1} and I am {0} years old.\".format(age, name)\nprint(greeting2)  # 输出：Hello, my name is Alice and I am 25 years old.\n\n# 可以使用关键字参数指定插入的值\ngreeting3 = \"Hello, my name is {name} and I am {age} years old.\".format(name=\"Alice\", age=25)\nprint(greeting3)  # 输出：Hello, my name is Alice and I am 25 years old.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, my name is Alice and I am 25 years old.\nHello, my name is Alice and I am 25 years old.\nHello, my name is Alice and I am 25 years old.\n```\n:::\n:::\n\n\n### 转义序列\n\n转义序列是一种特殊的字符序列，以反斜杠（\\）开头，并在其后跟着一个或多个字符。用于表示非打印字符、特殊字符或具有特殊含义的字符。\n\n转义序列以反斜杠（\\）开头，后跟一个或多个字符，用于表示特定的字符或操作。通过使用转义序列，我们可以在字符串中插入这些特殊字符，而不是将它们解释为普通字符。\n\n转义序列的定义和特性：\n\n- 转义序列以反斜杠（\\）开头。\n- 转义序列由一个或多个字符组成。\n- 转义序列用于表示非打印字符、特殊字符或具有特殊含义的字符。\n- 转义序列可以在字符串、字符常量、正则表达式和其他上下文中使用。\n\n以下是一些常见的转义序列及其含义：\n\n- \\n：换行符\n- \\t：制表符\n- \\r：回车符\n- \\\\'：单引号\n- \\\\\"：双引号\n- \\\\：反斜杠\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# 在字符串中使用转义序列来表示特殊字符：\nprint(\"Hello\\tWorld\")  # 输出：Hello    World\nprint(\"I\\'m a programmer\")  # 输出：I'm a programmer\nprint(\"She said, \\\"Hello!\\\"\")  # 输出：She said, \"Hello!\"\nprint(\"\\\"I love you.\\\" \\n \\\"Me too.\\\"\")\n# 在正则表达式中使用转义序列来匹配特殊字符：\nimport re\npattern = r\"\\d+\"  # 匹配一个或多个数字\nresult = re.findall(pattern, \"12345\")\nprint(result)  # 输出：['12345']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\tWorld\nI'm a programmer\nShe said, \"Hello!\"\n\"I love you.\" \n \"Me too.\"\n['12345']\n```\n:::\n:::\n\n\n## 变量\n\n变量是Python中的一个概念，用于存储和操作数据。它可以存储各种类型的数据，例如整数、浮点数、字符串等。\n\n特性：\n\n- 可以通过赋值操作将数据存储到变量中。\n- 可以使用变量名来访问变量中存储的数据。\n- 变量的值可以随时修改。\n- 变量可以在程序的不同位置使用和传递。\n- 变量的作用域可以限定在特定的代码块中。\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ni = 5\nprint(i)\n\ne = ( i + 1 ) * 2\n\nprint(e)\n\ns = '''This is a multi-line string.\nThis is the second line.'''\n\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n12\nThis is a multi-line string.\nThis is the second line.\n```\n:::\n:::\n\n\n## 运行逻辑\n\n### 逻辑行和物理行\n\n逻辑行是指在代码中表示一个语句或命令的行，而物理行是指在代码文件中实际占据一行的文本。\n\n逻辑行可以跨越多个物理行，通过使用行连接符（\\）将多个物理行连接成一个逻辑行。\n物理行则是代码文件中的实际行数，每个物理行都以换行符（\\n）结尾。\n\n逻辑行的特征：\n\n- 一个逻辑行可以包含一个或多个语句或命令。\n- 逻辑行可以跨越多个物理行。\n- 逻辑行以换行符（\\n）结尾。\n\n物理行的特征：\n\n- 物理行是代码文件中的实际行数。\n- 每个物理行都以换行符（\\n）结尾。\n\nPython鼓励每个物理行对应一个逻辑行，即每行一个语句，以保证代码的可读性。\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# 逻辑行跨越多个物理行的示例\nx = 1 + \\\n    2 + \\\n    3\n\nprint(x)\n\n# 逻辑行和物理行相同的示例\ny = 5\nprint(y)\n\ny = 5;\nprint(y);\n\ny = 5; print(y);\n\ny = 5; print(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n5\n5\n5\n5\n```\n:::\n:::\n\n\n### 缩进\n\n缩进是Python中的一种语法规则，用于表示代码块的层次结构。在Python中，缩进是强制性的，它决定了代码的执行顺序和逻辑关系。逻辑行的缩进级别决定了语句的分组，同组的语句构成一个代码块。\n\n基本概念：\n\n- 缩进是通过使用空格或制表符来实现的。\n- 缩进的数量和方式必须保持一致，通常建议使用四个空格进行缩进。\n- 缩进的层次结构决定了代码块的嵌套关系。\n\n特性：\n\n- 缩进用于定义函数、循环、条件语句等代码块。\n- 缩进可以提高代码的可读性和可维护性。\n- 缩进错误会导致语法错误或逻辑错误。\n\n代码示例：\n以下是一个缩进构成代码块的示例：\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef greet(name):\n    if name == \"Alice\":\n        print(\"Hello, Alice!\")\n    else:\n        print(\"Hello, stranger!\")\n\ngreet(\"Bob\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, stranger!\n```\n:::\n:::\n\n\n",
    "supporting": [
      "basic_zh_files"
    ],
    "filters": [],
    "includes": {}
  }
}