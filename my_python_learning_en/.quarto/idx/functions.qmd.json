{"title":"Functions","markdown":{"headingText":"Functions","containsRefs":false,"markdown":"\nFunctions are basic building blocks in programming that allow us to name a block of code and reuse it wherever needed. The act of executing these statements is called calling the function.\n\nIn our learning process, we have already come across and used many of Python's built-in functions like `len` and `range`.\n\nWe use the `def` keyword to define functions. The `def` keyword is followed by the function name and parentheses `()`. The parentheses may contain some parameters (preset variable names), and the line ends with a colon `:`.\n\n```{python}\ndef say_hello():\n    # Block belonging to the function\n    print('hello world')\n# End of function\n\nsay_hello() # Call the function\nsay_hello() # Call the function again\n```\n\nThe above code defines a function named `say_hello`. This function accepts no parameters, so there are no variables declared in the parentheses. We can pass in different arguments to let the function take different inputs and produce corresponding results.\n\n## Function Parameters\n\nFunctions can accept parameters and utilize these values to produce some effect.\n\nParameter:\n\n- When defining a function, we reserve some space for the function which are called parameters. Parameters are the receivers of the function definition.\n- Parameters are defined within the function header's parentheses, separated by commas. They are accessible within the entire function body.\n- Parameters are variables used to store the values passed in during function calls (arguments).\n\nArgument:\n\n- When calling a function, we pass in some values to the function, these values are called arguments. Arguments are the inputs of a function call.\n- Arguments assign concrete values to the parameters defined in the function. Also separated by commas.\n\nThis concept is analogous to a recipe and cooking. The list of ingredients on a recipe (e.g. certain grams of flour, certain grams of sugar) is like the parameter list, while the actual amount of flour and sugar you use is like the arguments.\n\n```{python}\n# Code sample from: A Byte of Python\ndef print_max(a, b):\n    if a > b:\n        print(a, 'is maximum') # Prints a is max\n    elif a == b:\n        print(a, 'is equal to', b) # Prints a is equal to b\n    else:\n        print(b, 'is maximum') # Prints b is max\n\n# Directly pass literals\nprint_max(3, 4)\n\nx = 5\ny = 7\n\n# Pass variables as arguments\nprint_max(x, y)\n```\n\nIn the sample code, we defined a function called `print_max` which contains two parameters `a` and `b`. We use an `if..else` statement to find out the larger number and print it out.\n\nThe first time calling the `print_max` function, we directly provide numbers as arguments. In the second case, we use variables `x`, `y` as arguments when calling the function. `print_max(x, y)` causes the value of parameter `x` to be assigned the value of argument `x`, and the value of parameter `y` to be assigned the value of argument `y`.\n\n## Local Variables\n\n- Variables declared inside a function definition are called \"local variables\".\n- The scope of \"local variables\" is limited to within the function where it is declared, this constraint is called variable \"scope\".\n- A variable's scope starts from where it is declared to the end of that code block or function.\n- Local variables inside functions are viewed as independent even if variables with the same names exist outside the function. Regardless of identical names, local variables inside functions have no relation with variables outside functions.\n\n```{python}\n# Code sample from: A Byte of Python\nx = 50\n\ndef func(x):\n    print('x is', x) # Print x's value\n    x = 2 # Modify local x's value\n    print('Changed local x to', x) # Prints modified x\n\nfunc(x)\nprint('x is still', x) # Prints original x\n```\n\nThe first time printing variable `x` inside the function body, Python uses the value of the parameter declared before the function in the main block.\n\nNext, we assign the local variable `x` in the function a value of 2. When we modify the value of local variable `x` inside the function, the `x` defined in main block remains unaffected.\n\n## The global statement\n\n- When we need to assign values to variables defined on a global program level (i.e. not inside a specific scope like functions or classes), we normally use the global declaration statement (`global` statement).\n- The global statement tells Python we are working with a global variable instead of a local variable.\n- Note that without using global, we cannot directly modify variables defined outside functions inside the function.\n- When a variable that hasn't been defined is referenced inside a function, Python will try to find that variable outside the function.\n- Despite this, we don't recommend this practice as it can confuse readers when trying to understand where that variable is defined.\n- If you want to operate on variables outside functions inside the function, it's recommended to use the `global` statement to explicitly indicate you are manipulating a globally defined variable.\n\n```{python}\n# Code sample from: A Byte of Python\nx = 50\n\ndef func():\n    global x\n\n    print('x is', x) # Print x's value\n    x = 2 # Modify global x's value\n    print('Changed global x to', x) # Prints modified x\n\nfunc()\nprint('Value of x is', x) # Prints final x\n```\n\nThe `global` statement declares that `x` is a global variable - therefore, when we assign a value to `x` inside the function, the change reflects when we use `x`'s value in main block.\n\nYou can use the same `global` statement to specify multiple global variables, e.g. `global x, y, z`.\n\n## Default Parameter Values\n\nWe can make some function parameters optional by setting default parameter values. When the user does not explicitly provide argument values, the function will use these set default values.\n\nThis can be achieved by assigning default values after the parameter names in the function definition with an equals sign (=).\n\n```{python}\n# Code sample from: A Byte of Python\ndef say(message, times=1):\n    print(message * times)\n\nsay('Hello') # Prints \"Hello\"\nsay('World', 5) # Prints \"WorldWorldWorldWorldWorld\"\n```\n\nThe function `say` repeats printing a string a number of times we specify.\n\n- When we don't explicitly specify print times, the function defaults to printing the string once. This is achieved by setting parameter `times`'s default value to 1.\n- In the first usage case, we only pass in the string argument, so the function defaults to printing that string once.\n- In the second usage case, we pass in the string and a number 5 as arguments, indicating we want the string to print 5 times.\n\nNote:\n\n- Only parameters at the end of the parameter list can have default parameter values.\n- That is, in the parameter list of a function, parameters with default values cannot occur before parameters without default values. This is because parameters are assigned positionally.\n- For example, `def func(a, b=5)` is valid, but `def func(a=5, b)` is invalid.\n\n## Keyword Arguments\n\n- If you have a function with many parameters and you want to specify only some of them, you can use named arguments.\n- Such arguments are called keyword arguments, where the specification of parameter values is by parameter names (keywords) instead of positions (which is what we have been using so far).\n- Using keyword arguments allows us to call functions more flexibly without needing to match the order of parameters as defined in the function.\n- As long as the other parameters have default values, we can assign values only to the parameters we want.\n\n```{python}\n# Code sample from: A Byte of Python\ndef func(a, b=5, c=10):\n    print('a is', a, 'and b is', b, 'and c is', c)\n\nfunc(3, 7)\nfunc(25, c=24)\nfunc(c=50, a=100)\n```\n\nThe function named `func` has one parameter without default value, followed by two parameters with default values.\n\n- In the first usage, `func(3, 7)`, parameter `a` gets value 3, parameter `b` gets value 7, and `c` gets the default value 10.\n- In the second usage, `func(25, c=24)`, 25 gets assigned to parameter `a` due to position. Then parameter `c` gets value 24 due to named arguments. Parameter `b` gets the default value 5.\n- In the third usage, we use keyword arguments for all specified values.\n- Note that although in the function definition, parameter `a` comes before parameter `c`, we can still assign a value to parameter `c` first before assigning to parameter `a`. This is a characteristic of keyword arguments.\n\n## Variable Arguments\n\nVariable arguments are a special kind of parameter that can accept any number of arguments. This is very useful in cases when you don't know beforehand how many arguments will be passed to the function, or the number varies.\n\nIn Python, variable arguments are indicated by adding an asterisk (*) before the parameter name.\n\n```{python}\n# Code sample from: A Byte of Python\ndef total(a=5, *numbers, **phonebook):\n    print('a', a)\n\n    # Traverse through all items in the tuple\n    for single_item in numbers:\n        print('single_item', single_item)\n\n    # Traverse through all items in the dictionary\n    for first_part, second_part in phonebook.items():\n        print(first_part,second_part)\n\ntotal(10, 1, 2, 3, Jack=1123, John=2231, Inge=1560)\n```\n\n- When we declare a starred parameter like `*param`, all positional arguments from that point till the end will be collected into a tuple named 'param'.\n- Similarly, when we declare a double-starred parameter like `**param`, all keyword arguments from that point till the end will be collected into a dictionary named 'param'.\n- We can access these arguments inside the function just like traversing a normal tuple or dictionary.\n- A function can only have one variable argument, and it must come after all the positional and default parameters.\n\n## The `return` Statement\n\nThe `return` statement is used to return results from functions or end function execution.\n\nInside a function, an expression after a `return` statement can have a value, and that value gets returned from the function.\n\n```{python}\n# Code sample from: A Byte of Python\ndef maximum(x, y):\n    if x > y:\n        return x\n    elif x == y:\n        return 'The numbers are equal'\n    else:\n        return y\n\nprint(maximum(2, 3))\n```\n\n- In this function, the `maximum` function uses a simple `if..else` statement to find the larger value and returns that value.\n- In this case, if we call `maximum(2, 3)`, the return value of this function would be 3.\n- Note that once a `return` statement is executed, the function execution immediately stops and the code after it does not get executed.\n- Note that a statement without a value is equivalent to `return None`. In Python, `None` is a special type indicating no value.\n- Every function implicitly has a `return None` at the end unless you have written a `return` statement yourself.\n- There is a built-in function called `max` that already implements \"finding maximum value\" functionality. So use that built-in function wherever possible.\n\n## Docstrings\n\nDocstrings refer to documentation strings in Python that are a way of documenting functions, methods, classes, modules etc with an invaluable reference purpose.\n\nDocstrings are located on the first line of function, method, class and module definitions, enclosed within a pair of triple quotes `\"\"\"` or `'''`, which can be single line or multi-line.\n\n```{python}\n# Code sample from: A Byte of Python\ndef print_max(x, y):\n    '''Prints the maximum of two numbers.\n\n    The two values must be integers.'''\n    # convert to integers, if possible\n    x = int(x)\n    y = int(y)\n\n    if x > y:\n        print(x, 'is maximum')\n    else:\n        print(y, 'is maximum')\n\nprint_max(3, 5)\nprint(print_max.__doc__)\n```\n\n- The convention for docstrings is to have a multi-line string where the first line starts with a capital letter and ends with a dot. Then the second line is blank, followed by any detailed explanation starting from the third line.\n- It is strongly recommended that you follow this convention for docstrings in all non-trivial functions.\n- In this example, we can access the docstring of function `print_max` with the `__doc__` attribute (note the double underscores) of that function.\n- The functionality of Python's help() is to retrieve this `__doc__` attribute and present it in a neat manner. You can try `help(print_max)` to view the docstring for `print_max`.\n- Automated tools can retrieve documentation from your programs this way. So it is highly recommended to use docstrings when writing any non-trivial functions.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"functions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","comments":{"hypothesis":true},"jupyter":{"path":"C://Conda_data//envs//main","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"bibliography":["references.bib"],"theme":"journal","code-copy":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"functions.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"comments":{"hypothesis":true},"jupyter":{"path":"C://Conda_data//envs//main","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","output-file":"functions.epub"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"comments":{"hypothesis":true},"jupyter":{"path":"C://Conda_data//envs//main","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"bibliography":["references.bib"],"cover-image":"python-logo-only.svg"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}