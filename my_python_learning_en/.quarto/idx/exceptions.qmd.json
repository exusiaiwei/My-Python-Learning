{"title":"Exceptions","markdown":{"headingText":"Exceptions","containsRefs":false,"markdown":"\n\nIn programming, exceptions are problems that can occur during the execution of a program. In Python, exceptions are designed as special objects that can be \"raised\" and \"caught\". When an exception is raised, the program flow will immediately transfer to the nearest exception handler that can handle that exception. If no corresponding handler is found, the program will terminate and display the exception message.\n\n\n\n\n## Handling Exceptions\n\nWe can use `try..except` statements to catch exceptions. The `try` statement contains the block of code that may raise an exception, as well as the exception handlers that handle those exceptions. The `except` block contains all the error handlers.\n\nThe basic syntax of a `try..except` statement is:\n\n```python\ntry:\n    # Code that may raise exception\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\n```\n\nIn the above code example:\n\n- The `try` statement contains code that may raise an exception, i.e. `x = 1 / 0`.\n- The `except` statement contains the code to handle exceptions, i.e. `print(\"Cannot divide by zero\")`.\n- The `except` statement can handle a single specified exception or a tuple of exceptions inside parentheses.\n- If no exception type is specified, the `except` statement will catch all types of exceptions.\n- In the code sample, `except ZeroDivisionError` specifies to only catch `ZeroDivisionError` exceptions. This is a specific exception type for handling divide by zero errors.\n- Each `try` statement can have multiple `except` statements to handle different types of exceptions. However, only one `except` statement will be executed.\n- Each `try` statement must have at least one `except` statement or `finally` statement to handle exceptions.\n\n\n### The `else` Statement\n\nThe `else` statement is used to specify a block of code to execute if no exception occurs. The basic syntax of the `else` statement is:\n\n```python\ntry:\n    # Code that may raise exception\n    x = 1 / 1\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nelse:\n    # Code to execute if no exception occurs\n    print(\"No exceptions occurred\")\n```\n\nIn the above code example:\n\n- The `else` statement contains code to execute if no exception occurs, i.e. `print(\"No exceptions occurred\")`.\n- The `else` statement is usually used to perform some clean-up operations when no exception occurs.\n- The `else` statement must appear after all `except` statements but before the `finally` statement.\n\n\n### The `finally` Statement\n\nThe `finally` statement is used to specify a block of code to execute regardless of whether an exception occurs or not. The `finally` statement is usually used to release resources or perform clean-up operations. The basic syntax of the `finally` statement is:\n\n```python\n\ntry:\n    # Code that may raise exception\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nelse:\n    # Code to execute if no exception occurs\n    print(\"No exceptions occurred\")\nfinally:\n    # Code to execute regardless of exception\n    print(\"This is always executed\")\n```\n\nIn the above code example:\n\n- The `finally` statement contains code to always execute regardless if an exception occurs or not, i.e. `print(\"This is always executed\")`.\n- The `finally` statement is usually used to release resources or perform clean-up operations. For example, we can close files, release locks, close database connections etc. in a `finally` statement.\n\n\n### The `with` Statement\n\nIn Python, the `with` statement is syntactic sugar that is mainly used to simplify resource management related code. For resources like file operations, network connections, database connections etc. that require explicit release after use, we can use the `with` statement to automatically manage the release of resources, making the code more concise and avoiding potential resource leaks.\n\n\n::: {.callout-tip}\n# What is Syntactic Sugar\n\nSyntactic sugar refers to syntax designed to make certain programming tasks easier to read or more expressive. Its main purpose is to improve readability of programs, make code more concise, or make semantics more explicit.\n\nThe term \"syntactic sugar\" was originally coined by Peter J. Landin (a computer scientist) in 1964, and is used figuratively to describe features that don't add new functionality to a computer language but make it more pleasant for humans to write or read code.\n\nThe figurative meaning of this noun is that such syntax is like adding some \"sugar\" to code, making the code that may otherwise be dull and rigid become sweeter and more aesthetic, bringing fun to programming. Just like sugar improves the taste of food without adding nutrition, syntactic sugar makes code more pleasant and easier to understand without changing the core functionality or semantics of the programming language.\n\nFor example, decorators and list comprehensions in Python don't add any new functionality to the language, they just make it clearer to write code with the same functionality, making programming more enjoyable. So they are called \"syntactic sugar\".\n:::\n\n\nThe basic syntax of a `with` statement is:\n\n```python\nwith expression as variable:\n    # code block\n```\n\nWhere `expression` must be an object that implements the `__enter__` and `__exit__` methods.\n\n- The `__enter__` method is invoked before executing the code block, used to return a resource object.\n- The `__exit__` method is invoked after finishing executing the code block, responsible for cleaning up or releasing resources.\n\n\nAn example of using a `with` statement is:\n\n```python\nwith open(r\"practical_code\\input_and_output\\data.pkl\", \"wb\") as f:\n    pickle.dump(data, f)\n```\n\nIn the above code example:\n\n- The `with` statement first invokes the `__enter__` method of the file object to open the file, and then assigns the returned file object to `f`.\n- Next, the `with` statement executes the code block, i.e. `pickle.dump(data, f)`.\n- Regardless if this code block raises exceptions or not, the `with` statement invokes the `__exit__` method of the file object to close the file. So we don't need to explicitly call `f.close()` to close the file.\n\nWhen handling exceptions without using `with` statements, we would need to explicitly call `f.close()` in a `finally` statement of the `try` block to close the file. By using `with` statements, we don't need to do this.\n\n## Exception Classes\n\nPython provides some built-in exception classes to represent different types of error conditions. Common exception classes include:\n\n- `Exception`: Base class for all exception classes.\n- `NameError`: Name error, raised when trying to access a variable or function that does not exist.\n- `TypeError`: Type error, raised when an operation or function is applied to an incompatible type.\n- `ValueError`: Value error, raised when an operation or function is applied to an object with the correct type but invalid value.\n- `IndexError`: Index error, raised when trying to access an index of a list, tuple or string that does not exist.\n- `KeyError`: Key error, raised when trying to access a key in a dictionary that does not exist.\n- `FileNotFoundError`: File not found error, raised when trying to open a file that does not exist.\n\n\n## Raising Exceptions\n\nWe can use the `raise` statement to raise exceptions. The `raise` statement is used to raise a specified exception.\n\nThe exception that can be raised can be an instance of any class, but is usually an instance of built-in exception classes. The basic syntax of a `raise` statement is:\n\n```python\nraise ValueError(\"Invalid value\")\n```\nThis line of code raises a `ValueError` exception with the error message `Invalid value`. In general, we raise exceptions this way to notify callers that some specific error condition has occurred, and we can define custom exception classes for such cases.\n\n## Custom Exception Classes\n\nA custom exception class is a class that inherits from the `Exception` class. We can create custom exception classes by inheriting from the `Exception` class. The basic syntax of a custom exception class is:\n\n```python\nclass ShortInputException(Exception):\n    def __init__(self, length, atleast):\n        self.length = length\n        self.atleast = atleast\ntry:\n    text = input(\"Enter something --> \")\n    if len(text) < 3:\n        raise ShortInputException(len(text), 3)\nexcept EOFError:\n    print(\"Why did you do an EOF on me?\")\nexcept ShortInputException as e:\n    #print(\"ShortInputException: The input was of length %d, was expecting at least %d\" % (e.length, e.atleast))\n    print(f\"ShortInputException: The input was of length {e.length}, was expecting at least {e.atleast}\")\nelse:\n    print(\"No exception was raised\")\n```\n\nIn the above code example:\n\n- `ShortInputException` is a custom exception class that inherits from the `Exception` class.\n- The statement `raise ShortInputException(len(text), 3)` raises a `ShortInputException` exception.\n- When an `except` statement catches an exception, it generates an exception instance containing the details. We can use the `as` keyword to assign the instance a variable name that we can then access in the except block for the exception details.\n- `%d` is a placeholder for formatting strings. The `%` operator is used for string formatting. In this case, `%d` indicates inserting an integer into the string.\n- In Python 3.6 and later, we can use f-strings for string formatting. F-strings provide a new way to format strings where variables can be directly inserted using variable names instead of placeholders, making it more intuitive and flexible.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"exceptions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","comments":{"hypothesis":true},"jupyter":{"path":"C://Conda_data//envs//main","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"bibliography":["references.bib"],"theme":"journal","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}